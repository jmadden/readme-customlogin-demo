{
  "openapi": "3.1.1",
  "info": {
    "title": "WidgetWorks API",
    "version": "1.0.0",
    "description": "Sample API showcasing OAuth2 with Authorization Code and Client Credentials flows for ReadMe Try It! demos."
  },
  "servers": [
    { "url": "http://localhost:3000" }
  ],
  "x-readme": {
    "oauth-options": {
      "scopeSeparator": ",",
      "useInsecureClientAuthentication": false
    },
    "samples-languages": ["shell", "javascript", "python"]
  },
  "jsonSchemaDialect": "https://json-schema.org/draft/2020-12/schema",
  "components": {
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://localhost:3000/oauth/authorize",
            "tokenUrl": "http://localhost:3000/oauth/token",
            "scopes": {
              "read:widgets": "Read widgets the user is permitted to see.",
              "write:widgets": "Create or modify widgets on behalf of the user.",
              "read:profile": "Read the user's profile."
            }
          },
          "clientCredentials": {
            "tokenUrl": "http://localhost:3000/oauth/token",
            "scopes": {
              "widgets:admin": "Administrative access for backend/service-to-service tasks.",
              "read:widgets": "Read widgets the service is permitted to see."
            }
          }
        }
      }
    },
    "schemas": {
      "Widget": {
        "type": "object",
        "required": ["id", "name"],
        "properties": {
          "id": { "type": "string", "format": "uuid", "example": "4a3e4c2d-7e2f-4c7e-9d67-4d2b2a1f8f0a" },
          "name": { "type": "string", "example": "Turbo Encabulator" },
          "status": { "type": "string", "enum": ["active", "inactive"], "example": "active" }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": { "type": "string" },
          "error_description": { "type": "string" }
        }
      }
    }
  },
  "security": [
    { "OAuth2": ["read:widgets"] }
  ],
  "paths": {
    "/oauth/token": {
      "post": {
        "summary": "Token endpoint",
        "description": "OAuth 2.0 token endpoint for authorization_code, client_credentials, and refresh_token.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": { "type": "string", "enum": ["authorization_code", "client_credentials", "refresh_token"] },
                  "code": { "type": "string" },
                  "redirect_uri": { "type": "string", "format": "uri" },
                  "client_id": { "type": "string" },
                  "client_secret": { "type": "string" },
                  "code_verifier": { "type": "string" },
                  "scope": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "token_type": { "type": "string", "enum": ["Bearer"] },
                    "expires_in": { "type": "integer" },
                    "scope": { "type": "string" },
                    "refresh_token": { "type": "string" }
                  },
                  "required": ["access_token", "token_type", "expires_in"]
                },
                "example": {
                  "access_token": "eyJhbGciOi...",
                  "token_type": "Bearer",
                  "expires_in": 3600,
                  "scope": "read:widgets write:widgets"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        },
        "security": []
      }
    },
    "/me": {
      "get": {
        "summary": "Get current user profile",
        "description": "Requires a user token obtained via Authorization Code flow.",
        "security": [
          { "OAuth2": ["read:profile"] }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "email": { "type": "string", "format": "email" },
                    "name": { "type": "string" }
                  },
                  "required": ["id", "email"]
                },
                "example": {
                  "id": "user_123",
                  "email": "dev@example.com",
                  "name": "Dev User"
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/widgets": {
      "get": {
        "summary": "List widgets",
        "description": "Available to any token with read:widgets (user tokens or client credentials).",
        "responses": {
          "200": {
            "description": "Array of widgets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Widget" }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "summary": "Create a widget",
        "description": "Requires write:widgets. Typically a user token via Authorization Code.",
        "security": [
          { "OAuth2": ["write:widgets"] }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Widget" },
              "example": { "name": "Flux Compensator", "status": "active" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Widget" }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/admin/reports/daily": {
      "get": {
        "summary": "Admin daily report",
        "description": "Service-to-service call. Client Credentials only with widgets:admin.",
        "security": [
          { "OAuth2": ["widgets:admin"] }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "date": { "type": "string", "format": "date" },
                    "totals": {
                      "type": "object",
                      "properties": {
                        "widgetsCreated": { "type": "integer" },
                        "activeUsers": { "type": "integer" }
                      },
                      "required": ["widgetsCreated", "activeUsers"]
                    }
                  },
                  "required": ["date", "totals"]
                },
                "example": {
                  "date": "2025-09-17",
                  "totals": { "widgetsCreated": 42, "activeUsers": 1337 }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    }
  }
}